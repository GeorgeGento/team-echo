// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())
  userId String @unique

  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  messages DirectMessage[]

  friendsInitiated Friend[] @relation("CurrentUser")
  friendsReceived Friend[] @relation("TargetUser")

  blockedInitiated BlockedUser[] @relation("CurrentUser")
  blockedReceived BlockedUser[] @relation("TargetUser")

  conversationsInitiated Conversation[] @relation("CurrentUser")
  conversationsReceived Conversation[] @relation("TargetUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @unique @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum MemberRole {
  ADMIN 
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
}

model Conversation {
  id String @id @default(uuid())

  currentUserId String
  currentUser User @relation("CurrentUser", fields: [currentUserId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser User @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)

  messages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currentUserId])
  @@index([targetUserId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  authorId String
  author Member @relation(fields: [authorId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([channelId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  channelId String
  conversation Conversation @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([channelId])
}

model Friend {
  id String @id @default(uuid())
  accepted Boolean @default(false)

  currentUserId String
  currentUser User @relation("CurrentUser", fields: [currentUserId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser User @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currentUserId])
  @@index([targetUserId])
}

model BlockedUser {
  id String @id @default(uuid())

  currentUserId String
  currentUser User @relation("CurrentUser", fields: [currentUserId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser User @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currentUserId])
  @@index([targetUserId])
}